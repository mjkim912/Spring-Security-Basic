server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true
      
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/security?serverTimezone=Asia/Seoul
    username: cos
    password: cos1234
  
  # 생략가능 
  #mvc:
  #  view:
  #    prefix: /templates/
  #    suffix: .mustache
     

  jpa:
    hibernate:
      ddl-auto: update #create update none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true
    

  security:
    oauth2:
      client:
        registration:
          google: # /oauth2/authorization/google 이 주소를 동작하게 한다.
            client-id: 67757824645-p58qhj6nni65404ki0fmc70e9ivn8ctn.apps.googleusercontent.com
            client-secret: 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
            scope:
            - email
            - profile
            
          facebook:
            client-id: 140113468801547
            client-secret: e2a40772c8b28dfbc0c99a386a7522e5
            scope:
            - email
            - public_profile
          
          # 네이버는 OAuth2.0 공식 지원대상이 아니라서 provider 설정이 필요하다.
          # 요청주소도 다르고, 응답 데이터도 다르기 때문이다.
          naver:
            client-id: o2rmBjT9qHI_E3cap7sg
            client-secret: YJJ1aZnGo6
            scope:
            - name
            - email
            client-name: Naver  # 클라이언트 네임은 구글 페이스북도 대문자로 시작하더라.
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            
          
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원정보를 json의 response 키값으로 네이버가 리턴해줌.
  